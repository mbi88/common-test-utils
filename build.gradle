import groovy.io.FileType

plugins {
    id 'ru.vyarus.quality' version '3.3.0'
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'

def suitesDir = 'src/test/resources/suites/'

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation group: 'com.github.mbi88', name: 'json-assert', version: 'master-SNAPSHOT', changing: true
    implementation group: 'com.github.mbi88', name: 'json-validator', version: 'master-SNAPSHOT', changing: true
    implementation group: 'com.github.mbi88', name: 'http-request', version: 'master-SNAPSHOT', changing: true
    implementation group: 'com.github.mbi88', name: 'date-handler', version: 'master-SNAPSHOT', changing: true
    implementation group: 'org.testng', name: 'testng', version: '6.14.2'
    implementation group: 'org.json', name: 'json', version: '20180130'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'
    implementation group: 'io.rest-assured', name: 'rest-assured', version: '3.2.0'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-ssm', version: '1.11.312'
    implementation group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'
}

test {
    useTestNG() {
        // Add test suites
        def suitesList = []
        def dir = new File(suitesDir)
        dir.eachFileRecurse(FileType.FILES) { file -> suitesList << file }
        suitesList.each { options.suites(it.path) }

        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        html.destination file("${buildDir}/reports/coverage")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

quality {
    checkstyle = true
    pmd = true
    findbugs = true
    codenarc = true
    spotbugs = false
}

check.dependsOn jacocoTestReport