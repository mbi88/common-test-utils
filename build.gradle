import groovy.io.FileType

group 'com.audienceproject'
version '1.0-SNAPSHOT'

apply plugin: 'java'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

def suitesDir = 'src/main/resources/suites/'
def reportPortalUrl = 'http://report-portal.srv.ap.priv'
def reportPortalListener = 'com.epam.reportportal.testng.ReportPortalTestNGListener'
def customListener = 'tests.TestListener'

repositories {
    mavenCentral()
    jcenter()
    maven { url "http://dl.bintray.com/epam/reportportal" }
    maven { url "https://jitpack.io" }
}

dependencies {
    compile group: 'com.github.mbi88', name: 'json-assert', version: '621144187e0edf0401ae738638d46ea057f953bd'
    compile group: 'com.github.mbi88', name: 'json-validator', version: 'd6f9ac292d4071c6734d1c3b7eb1fe78d5d3b4a5'
    compile group: 'com.github.mbi88', name: 'http-request', version: 'e39b33411f1ea1526c69456521963892a4e68e8f'
    compile group: 'com.github.mbi88', name: 'date-handler', version: '869aeae995f005cbe5c8cb28fd5ec22c86d504ce'
    compile group: 'org.testng', name: 'testng', version: '6.14.2'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.6'
    compile group: 'org.json', name: 'json', version: '20180130'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'
    compile group: 'com.github.reportportal', name: 'agent-java-testng', version: '3.0.0'
}

test {
    useTestNG() {
        useDefaultListeners = true

        // Support system properties
        options {
            systemProperties(System.getProperties())
        }

        // Support group excluding
        if (project.hasProperty("exclude"))
            options.excludeGroups(project.findProperty('exclude'))

        // Add test suites
        // Support running specific suite
        if (project.hasProperty("suite")) {
            options.suites(suitesDir + project.findProperty('suite') + ".xml")
        } else {
            def suitesList = []
            def dir = new File(suitesDir)
            dir.eachFileRecurse(FileType.FILES) { file -> suitesList << file }
            suitesList.each { options.suites(it.path) }
        }
    }

    // Set listeners
    def reportPortalConnection = reportPortalUrl.toURL().openConnection()
    List<String> listeners = new ArrayList<>()
    listeners.add(customListener)
    if (reportPortalConnection.responseCode == 200)
        listeners.add(reportPortalListener)
    for (String s : listeners)
        options.listeners << s

    // Logging set up
    testLogging {
        showStandardStreams = false
        events "failed", "skipped"
        showExceptions true
        showCauses false
        showStackTraces false
        exceptionFormat "FULL"

        // Set options for log level DEBUG and INFO
        debug {
            showExceptions true
            showCauses true
            showStackTraces true
            exceptionFormat "FULL"
            events "passed", "failed", "skipped", "STANDARD_OUT"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        // Print summary
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} " +
                        "successes, ${result.failedTestCount} " +
                        "failures, ${result.skippedTestCount} " +
                        "skipped)"
                def repeatLength = output.length()
                println('\n' + ('-' * repeatLength) + '\n' + output + '\n' + ('-' * repeatLength))
            }
        }

        onOutput { descriptor, event ->
            print(event.message)
        }
    }
}